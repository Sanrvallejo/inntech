-- Crear la tabla autores
CREATE TABLE autores (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    nacionalidad VARCHAR(50) NOT NULL
);

-- Crear la tabla libros
CREATE TABLE libros (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    titulo VARCHAR(100) NOT NULL,
    autor_id NUMBER NOT NULL,
    FOREIGN KEY (autor_id) REFERENCES autores(id)
    ON DELETE CASCADE
);

-- Paquete para operaciones CRUD sobre libros
CREATE OR REPLACE NONEDITIONABLE PACKAGE PKG_LIBROS_CUD AS
    -- Procedimientos de operaciones create - update - delete
    PROCEDURE crear_libro(p_titulo VARCHAR2, p_autor_id IN autores.id%TYPE);
    PROCEDURE actualizar_libro(p_id IN libros.id%TYPE, p_titulo VARCHAR2);
    PROCEDURE eliminar_libro(p_id IN libros.id%TYPE);
END PKG_LIBROS_CUD;
/

-- Cuerpo del paquete PKG_LIBROS_CUD
CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY PKG_LIBROS_CUD AS

    PROCEDURE crear_libro(p_titulo VARCHAR2, p_autor_id IN autores.id%TYPE) IS
    BEGIN
        INSERT INTO libros(titulo, autor_id) 
        VALUES (p_titulo, p_autor_id);
    END crear_libro;

    PROCEDURE actualizar_libro(p_id IN libros.id%TYPE, p_titulo VARCHAR2) IS
    BEGIN
        UPDATE libros
        SET titulo = p_titulo
        WHERE libros.id = p_id;
    END actualizar_libro;

    PROCEDURE eliminar_libro(p_id IN libros.id%TYPE) IS
    BEGIN
        DELETE FROM libros WHERE libros.id = p_id;
    END eliminar_libro;

END PKG_LIBROS_CUD;
/

-- Paquete para operaciones de lectura sobre libros
CREATE OR REPLACE NONEDITIONABLE PACKAGE PKG_LIBROS_READ AS
    -- Tipos y funciones de lectura
    TYPE type_cursor IS REF CURSOR;
    FUNCTION obtener_libro(p_id IN libros.id%TYPE) RETURN type_cursor;
    FUNCTION listar_libros RETURN type_cursor;
END PKG_LIBROS_READ;
/

-- Cuerpo del paquete PKG_LIBROS_READ
CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY PKG_LIBROS_READ AS

    FUNCTION obtener_libro(p_id IN libros.id%TYPE) RETURN type_cursor IS
        c_libro type_cursor;
    BEGIN
        OPEN c_libro FOR
            SELECT * FROM libros WHERE libros.id = p_id;
        RETURN c_libro;
    END obtener_libro;

    FUNCTION listar_libros RETURN type_cursor IS
        c_libro type_cursor;
    BEGIN
        OPEN c_libro FOR
            SELECT * FROM libros;
        RETURN c_libro;
    END listar_libros;

END PKG_LIBROS_READ;
/

-- Paquete para operaciones CRUD sobre autores
CREATE OR REPLACE NONEDITIONABLE PACKAGE PKG_AUTORES_CUD AS
    -- Procedimientos de operaciones create - update - delete
    PROCEDURE crear_autor(p_nombre VARCHAR2, p_nacionalidad VARCHAR2);
    PROCEDURE actualizar_autor(p_id IN autores.id%TYPE, p_nombre VARCHAR2, p_nacionalidad VARCHAR2);
    PROCEDURE eliminar_autor(p_id IN autores.id%TYPE);
END PKG_AUTORES_CUD;
/

-- Cuerpo del paquete PKG_AUTORES_CUD
CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY PKG_AUTORES_CUD AS

    PROCEDURE crear_autor(p_nombre VARCHAR2, p_nacionalidad VARCHAR2) IS
    BEGIN
        INSERT INTO autores(nombre, nacionalidad) 
        VALUES (p_nombre, p_nacionalidad);
    END crear_autor;

    PROCEDURE actualizar_autor(p_id IN autores.id%TYPE, p_nombre VARCHAR2, p_nacionalidad VARCHAR2) IS
    BEGIN
        UPDATE autores
        SET 
            nombre = p_nombre,
            nacionalidad = p_nacionalidad
        WHERE autores.id = p_id;
    END actualizar_autor;

    PROCEDURE eliminar_autor(p_id IN autores.id%TYPE) IS
    BEGIN
        DELETE FROM autores WHERE autores.id = p_id;
    END eliminar_autor;

END PKG_AUTORES_CUD;
/

-- Paquete para operaciones de lectura sobre autores
CREATE OR REPLACE NONEDITIONABLE PACKAGE PKG_AUTORES_READ AS
    -- Tipos y funciones de lectura
    TYPE type_cursor IS REF CURSOR;
    FUNCTION obtener_autor(p_id IN autores.id%TYPE) RETURN type_cursor;
    FUNCTION listar_autores RETURN type_cursor;
END PKG_AUTORES_READ;
/

-- Cuerpo del paquete PKG_AUTORES_READ
CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY PKG_AUTORES_READ AS

    FUNCTION obtener_autor(p_id IN autores.id%TYPE) RETURN type_cursor IS
        c_autor type_cursor;
    BEGIN
        OPEN c_autor FOR
            SELECT * FROM autores WHERE autores.id = p_id;
        RETURN c_autor;
    END obtener_autor;

    FUNCTION listar_autores RETURN type_cursor IS
        c_autor type_cursor;
    BEGIN
        OPEN c_autor FOR
            SELECT * FROM autores;
        RETURN c_autor;
    END listar_autores;

END PKG_AUTORES_READ;
/
